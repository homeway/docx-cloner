#language: zh-CN

功能: 支持DSL用法
  允许在ruby代码中使用类似的DSL语法来指定docx标签替换操作：
  """
  extend 'Docx::DSL'
  docx_cloner 'source.docx', 'dest.docx' do
    set_text '{Name}', '周大福'
    set_row 'tr' do |t|
      t[:tags] = ["{名称1}", "{00.01}"]
      t[:data] = [["自行车1", "125.00"], ["大卡车1", "256500.00"]]
    end
  end
  """
  其中：
  1、需要用include或extend包含 'Docx::DSL'
  2、docx_cloner，是指定过程容器，'source_docx'是模板文件，'dest.docx'是要保存的目标文件。
  3、set_text，可以将独立的文字标签替换，如'{Name}'替换为'周大福'
  4、set_row，可以按照一行内的标签模板，根据指定数据集生成多行文字，t[:tags]为标签数组，t[:data]为被替换的二维数组

  背景: 被替换的源文件
    假如"docx-examples"示例文件夹中存在一个"source.docx"的文件
    而且"docx-examples/dest.docx"这个目标文件已经被清除
    而且要求使用DSL语法

  
  场景大纲: 1、使用DSL，简单替换单个文字标签
    这是最简单的情形，例如将标签{name}，替换为真正的姓名。

    假如程序使用DSL语法将目标文件中的"<tagname>"替换为"<value>"
    那么应该生成目标文件
    而且被目标文件中应该包含"<value>"这个标签词

    例子: 替换单个标签的几种情况

      | tagname | value |
      | {name}  | 周大福 |
      | {Name}  | 周大福 |
      | {NAME}  | 周大福 |
      | {{名字}} | 周大福 |
      | $名字$   | 周大福 |    

  @wip
  场景: 2、使用DSL，替换表格行数据
    按行数据替换表格内容是常见的应用

    假如有这样一组数据：
      | {名称1} | {00.01}   |
      | 自行车  | 256.00    |
      | 小汽车  | 125600.00 |
      | 大卡车  | 256000.00 |
      | 电视机  | 6999.00   |
      | 洗衣机  | 3488.00   |

    当程序使用DSL，将表中第1行作为标签名，第2行以后作为行数据替换
    那么应该生成目标文件
    而且被目标文件中应该包含被替换的第2行以后的数据


